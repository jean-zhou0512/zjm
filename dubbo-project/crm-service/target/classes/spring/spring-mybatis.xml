<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 基于Druid数据库链接池的数据源配置
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		 基本属性driverClassName、 url、user、password
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		 配置初始化大小、最小、最大
		 通常来说，只需要修改initialSize、minIdle、maxActive
		<property name="initialSize" value="10" />
		<property name="minIdle" value="10" />
		<property name="maxActive" value="100" />
		 建议配置为true，不影响性能，并且保证安全性。
		 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
		<property name="testWhileIdle" value="true" />

		 配置获取连接等待超时的时间
		<property name="maxWait" value="5000" />
		 配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="300000" />
		 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		 验证连接有效与否的SQL，不同的数据配置不同
		<property name="validationQuery" value="select 1 " />
		 解密密码必须要配置的项
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true" />
	</bean>
	 将数据源映射到sqlSessionFactory中
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/cn/dao/**/*Mapper.xml"></property>
	</bean>


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cn.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>


	 SqlSession模板类实例
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	======= 事务配置 Begin =================
	 事务管理器（由Spring管理MyBatis的事务）
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		 关联数据源
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	======= 事务配置 End =================== -->

	<!--    数据库连接池-->
	<!--    加载配置文件-->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!--    数据库连接池-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="maxActive" value="10"/>
		<property name="minIdle" value="5"/>
		<!-- 用于显示数据源监控中的sql语句监控 -->
		<property name="filters" value="stat" />
	</bean>
	<!--    让spring管理sqlsessionfactory 使用mybatis和spring整合包中的-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--        数据库连接池-->
		<property name="dataSource" ref="dataSource"/>
		<!--        加载mybatis的全局配置文件-->
		<property name="mapperLocations" value="classpath*:com/cn/mybatis/*Mapper.xml"/>
	</bean>

	<!--    自动扫描 将Mapper接口生成代理注入到Spring-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cn.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

</beans>